plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id 'java'
	id 'idea'
	id 'eclipse'
}

group = project.maven_group

base {
	archivesName = project.archives_base_name
}

// Override system configuration
def versionKey = project.hasProperty('minecraft_version') ? project.minecraft_version : project.minecraft_version
def overrideVersion = versionKey.replace('.', '_')
def overrideDir = file("src/overrides/v${overrideVersion}")

// Version profile loading
def loadVersionProfile(String version) {
	def profileFile = file("gradle/versions/${version}.properties")
	if (profileFile.exists()) {
		logger.info("Loading version profile for ${version}")
		def properties = new Properties()
		profileFile.withInputStream { stream ->
			properties.load(stream)
		}
		properties.each { key, value ->
			project.ext[key] = value
		}
	} else {
		logger.info("No version profile found for ${version}, using defaults")
	}
}

// Load version profile for current Minecraft version
loadVersionProfile(versionKey)

// Set project version after profile is loaded
version = project.mod_version

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	// Modrinth Maven (for VulkanMod and other mods)
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	// Maven Central for additional dependencies
	mavenCentral()
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"vulkanmod-extra" {
			sourceSet sourceSets.client
		}
	}

}

// Configure source sets to include version-specific overrides
// Add version-specific Java overrides if they exist
if (overrideDir.exists()) {
	def javaOverrideDir = new File(overrideDir, 'java')
	if (javaOverrideDir.exists()) {
		sourceSets.client.java.srcDirs += javaOverrideDir
	}
}

// Add version-specific resource overrides if they exist
if (overrideDir.exists()) {
	def resourcesOverrideDir = new File(overrideDir, 'resources')
	if (resourcesOverrideDir.exists()) {
		sourceSets.client.resources.srcDirs += resourcesOverrideDir
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.hasProperty('yarn_mappings') ? project.yarn_mappings : project.minecraft_version + '+build.1'}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.hasProperty('loader_version') ? project.loader_version : '0.17.2'}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.hasProperty('fabric_api_version') ? project.fabric_api_version : project.hasProperty('fabric_version') ? project.fabric_version : '0.116.5+' + project.minecraft_version}"

	// VulkanMod dependency - required for integration
	modImplementation "maven.modrinth:vulkanmod:${project.hasProperty('vulkanmod_version') ? project.vulkanmod_version : '0.5.5'}"

	// Suppress ErrorProne annotation warnings from GSON
	compileOnly 'com.google.errorprone:error_prone_annotations:2.23.0'

	// OSHI library for enhanced monitor information detection
	implementation 'com.github.oshi:oshi-core:6.8.3'

	// Note: VulkanMod requires Vulkan drivers and may not work in dev environment
	// For testing without graphics, consider using production builds

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
	it.options.encoding = 'UTF-8'
	it.options.compilerArgs.addAll([
		'-Xlint:all',
		'-Xlint:-processing',
		'-parameters'
	])
}


java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// Configure sourcesJar to exclude override directories to prevent duplicates
tasks.withType(Jar) {
	// Exclude override directories from source jars to prevent duplicates
	exclude "src/overrides/**"
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

// Version switching tasks
task switchTo1_21_1 {
	doLast {
		exec { commandLine 'cmd', '/c', 'scripts/switch-version.bat', '1.21.1' }
	}
}

task switchTo1_21_2 {
	doLast {
		exec { commandLine 'cmd', '/c', 'scripts/switch-version.bat', '1.21.2' }
	}
}

task switchTo1_21_3 {
	doLast {
		exec { commandLine 'cmd', '/c', 'scripts/switch-version.bat', '1.21.3' }
	}
}

task switchTo1_21_4 {
	doLast {
		exec { commandLine 'cmd', '/c', 'scripts/switch-version.bat', '1.21.4' }
	}
}

task switchTo1_21_5 {
	doLast {
		exec { commandLine 'cmd', '/c', 'scripts/switch-version.bat', '1.21.5' }
	}
}

// Run client for specific versions
task runClient1_21_1 {
	dependsOn switchTo1_21_1, runClient
}

task runClient1_21_2 {
	dependsOn switchTo1_21_2, runClient
}

task runClient1_21_3 {
	dependsOn switchTo1_21_3, runClient
}

task runClient1_21_4 {
	dependsOn switchTo1_21_4, runClient
}

task runClient1_21_5 {
	dependsOn switchTo1_21_5, runClient
}

// Create individual build tasks for each version
task buildVersion1_21_1(type: GradleBuild) {
    tasks = ['clean', 'build']
    startParameter.projectProperties += [minecraft_version: '1.21.1']
}

task buildVersion1_21_2(type: GradleBuild) {
    tasks = ['clean', 'build']
    startParameter.projectProperties += [minecraft_version: '1.21.2']
}

task buildVersion1_21_3(type: GradleBuild) {
    tasks = ['clean', 'build']
    startParameter.projectProperties += [minecraft_version: '1.21.3']
}

task buildVersion1_21_4(type: GradleBuild) {
    tasks = ['clean', 'build']
    startParameter.projectProperties += [minecraft_version: '1.21.4']
}

task buildVersion1_21_5(type: GradleBuild) {
    tasks = ['clean', 'build']
    startParameter.projectProperties += [minecraft_version: '1.21.5']
}

// Build all versions task
task buildAllVersions {
    dependsOn = ['buildVersion1_21_1', 'buildVersion1_21_2', 'buildVersion1_21_3', 'buildVersion1_21_4', 'buildVersion1_21_5']
    
    doLast {
        // Create releases directory
        file('build/releases').mkdirs()
        
        // Copy and rename artifacts for all versions
        ['1.21.1', '1.21.2', '1.21.3', '1.21.4', '1.21.5'].each { version ->
            println("Processing artifacts for Minecraft ${version}...")
            
            copy {
                from 'build/libs'
                include '*.jar'
                exclude '*-sources.jar', '*-dev.jar', '*-dev-shadow.jar'
                into 'build/releases'
                rename { fileName ->
                    if (fileName.contains('-mc')) {
                        fileName.replace('.jar', "-${version}.jar")
                    } else {
                        fileName.replace('.jar', "-mc${version}.jar")
                    }
                }
            }
            
            println("âœ“ Completed build for Minecraft ${version}")
        }
    }
}

// Override handling task - manages file overrides to prevent duplicate classes
task setupOverrides {
	doLast {
		// Use variables already defined at the top of the file
		
		if (overrideDir.exists()) {
			logger.lifecycle("Setting up overrides for Minecraft version ${versionKey}")
			
			// Create temp directory for storing overridden files
			def tempDir = file("build/tmp/overrides")
			tempDir.mkdirs()
			
			// Process Java overrides
			def javaOverrideDir = new File(overrideDir, 'java')
			if (javaOverrideDir.exists()) {
				javaOverrideDir.eachFileRecurse { overrideFile ->
					if (overrideFile.name.endsWith('.java')) {
						// Calculate relative path from override directory
						def relativePath = overrideFile.absolutePath - javaOverrideDir.absolutePath
						def originalFile = file("src/client/java${relativePath}")
						
						if (originalFile.exists()) {
							// Create temp directory structure
							def tempFileDir = new File(tempDir, "client${relativePath}")
							tempFileDir.getParentFile().mkdirs()
							
							// Move original file to temp location
							logger.lifecycle("Overriding: ${relativePath}")
							ant.move(file: originalFile, tofile: tempFileDir)
						}
					}
				}
			}
			
			// Process resource overrides
			def resourcesOverrideDir = new File(overrideDir, 'resources')
			if (resourcesOverrideDir.exists()) {
				resourcesOverrideDir.eachFileRecurse { overrideFile ->
					// Calculate relative path from override directory
					def relativePath = overrideFile.absolutePath - resourcesOverrideDir.absolutePath
					def originalFile = file("src/client/resources${relativePath}")
					
					if (originalFile.exists()) {
						// Create temp directory structure
						def tempFileDir = new File(tempDir, "client${relativePath}")
						tempFileDir.getParentFile().mkdirs()
						
						// Move original file to temp location
						logger.lifecycle("Overriding resource: ${relativePath}")
						ant.move(file: originalFile, tofile: tempFileDir)
					}
				}
			}
		} else {
			logger.lifecycle("No overrides found for Minecraft version ${versionKey}")
		}
	}
}

// Restore original files after compilation
task restoreOverrides {
	doLast {
		def tempDir = file("build/tmp/overrides")
		if (tempDir.exists()) {
			logger.lifecycle("Restoring overridden files")
			
			// Restore client files
			def clientTempDir = new File(tempDir, "client")
			if (clientTempDir.exists()) {
				clientTempDir.eachFileRecurse { tempFile ->
					if (!tempFile.isDirectory()) {
						def relativePath = tempFile.absolutePath - clientTempDir.absolutePath
						def originalFile = file("src/client/java${relativePath}")
						
						// Restore original file
						logger.lifecycle("Restoring: ${relativePath}")
						ant.move(file: tempFile, tofile: originalFile)
					}
				}
			}
			
			// Clean up temp directory
			tempDir.deleteDir()
		}
	}
}

// Make setupOverrides run before any compilation task
tasks.withType(JavaCompile) {
	dependsOn setupOverrides
	finalizedBy restoreOverrides
}

// Make setupOverrides run before resource processing
tasks.withType(ProcessResources) {
	dependsOn setupOverrides
	finalizedBy restoreOverrides
}

// Make setupOverrides run before sourcesJar and restore afterwards
sourcesJar.dependsOn setupOverrides
sourcesJar.finalizedBy restoreOverrides

// Clean all releases
task cleanAllReleases {
	doLast {
		delete 'build/releases'
	}
}

// Clean override temp files
task cleanOverrides {
	doLast {
		delete 'build/tmp/overrides'
		restoreOverrides
	}
}

// Add cleanOverrides to clean task
clean.dependsOn cleanOverrides